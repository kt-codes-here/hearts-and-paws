// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String   @id @default(uuid())
  clerkId      String   @unique // Clerk user ID
  email        String   @unique
  firstName    String?
  role         Int?
  lastName     String?
  profileImage String?
  phone        String?
  address      String?
  instagram    String?
  bio          String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  pets            Pet[]
  adoptions       Adoption[]
  rehomes         Rehome[]
  adoptionRequests AdoptionRequest[]
  serviceProvider ServiceProvider?
  appointments    Appointment[]
  reviews         Review[]
  payments         Payment[]
}

model Pet {
  id              String   @id @default(uuid())
  ownerId         String  @map("userId")
  owner           User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  name            String
  category        String
  age             Int
  size            String
  gender          String
  breed           String
  colors          String
  shotsUpToDate   Boolean
  microchipped    Boolean
  houseTrained    Boolean
  goodWithDogs    Boolean
  goodWithCats    Boolean
  goodWithKids    Boolean
  purebred        Boolean
  specialNeeds    Boolean
  behavioralIssues Boolean
  addressLine1    String
  addressLine2    String?
  city            String
  postcode        String
  additionalInfo  String?
  images          String[]
  status          String   @default("available") // available, pending, adopted
  isAdopted       Boolean  @default(false)      // New field
  adoptedBy       String?  // New field to store the user ID who adopted
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  adoptions       Adoption[]
  rehomes         Rehome[]
  adoptionRequests AdoptionRequest[]
}

model Adoption {
  id                    String   @id @default(uuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  petId                 String
  pet                   Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  addressLine1          String
  addressLine2          String?
  postcode              String
  town                  String
  telephone             String
  hasGarden             Boolean
  homeSituation         String
  householdSetting      String
  activityLevel         String
  homePhotos            String[]
  numAdults             Int
  numChildren           Int
  youngestChildAge      Int
  visitingChildren      Boolean
  visitingChildrenAges  String?
  flatmatesOrLodgers    Boolean
  allergiesToPets       Boolean
  previousPetExperience String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
}

model Rehome {
  id                String   @id @default(uuid())
  userId            String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  petId             String
  pet               Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  reason            String
  durationToKeepPet String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
}

model ServiceProvider {
  id           String        @id @default(uuid())
  userId       String        @unique
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName String
  address      String
  city         String
  postcode     String
  phone        String
  services     Service[]
  appointments Appointment[]
  reviews      Review[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Service {
  id           String          @id @default(uuid())
  providerId   String
  provider     ServiceProvider @relation(fields: [providerId], references: [userId], onDelete: Cascade)
  name         String
  description  String
  price        Float
  duration     Int
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  appointments Appointment[]
  payments     Payment[]  
}

model Appointment {
  id              String           @id @default(uuid())
  serviceId       String
  service         Service          @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  providerId      String
  provider        ServiceProvider  @relation(fields: [providerId], references: [userId], onDelete: Cascade)
  customerId      String
  customer        User             @relation(fields: [customerId], references: [id], onDelete: Cascade)
  appointmentDate DateTime
  status          String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  payment         Payment?         // Optional relation: one appointment has at most one payment.
}

model Review {
  id         String          @id @default(uuid())
  providerId String
  provider   ServiceProvider @relation(fields: [providerId], references: [id], onDelete: Cascade)
  customerId String
  customer   User            @relation(fields: [customerId], references: [id], onDelete: Cascade)
  rating     Int
  comment    String?
  createdAt  DateTime        @default(now())
}

model AdoptionRequest {
  id          String   @id @default(uuid())
  petId       String
  pet         Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)
  requesterId String
  requester   User     @relation(fields: [requesterId], references: [id], onDelete: Cascade)
  status      String   @default("pending")
  message     String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Payment {
  id             String       @id @default(uuid())
  appointmentId  String       @unique
  appointment    Appointment  @relation(fields: [appointmentId], references: [id], onDelete: Cascade)
  serviceId      String
  service        Service      @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  customerId     String
  customer       User         @relation(fields: [customerId], references: [id], onDelete: Cascade)
  amount         Float
  currency       String
  status         String       // e.g., "pending", "completed", "failed", "refunded"
  method         String?      // e.g., "stripe", "paypal"
  transactionId  String?      // External transaction ID returned by the payment processor
  invoiceUrl     String?      // URL to the generated invoice PDF, if applicable
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}