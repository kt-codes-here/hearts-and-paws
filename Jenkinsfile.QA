pipeline {
    agent any

    environment {
        NODE_VERSION = '22.14.0'
        DATABASE_URL = credentials('DATABASE_URL')
        NEXT_PUBLIC_API_URL = 'https://api.hearts-and-paws.qa'
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY = credentials('NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY')
        CLERK_SECRET_KEY = credentials('CLERK_SECRET_KEY')
        DEPLOY_DIR = 'E:\\jenkinnodes\\workspace\\Deployment to QA\\hearts-and-paws'
        APP_NAME = 'Slack-notification-service'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "üì• Pulling latest changes from branch-dev"
                    bat """
                        cd ${DEPLOY_DIR}
                        git reset --hard HEAD
                        git pull origin branch-dev || exit /b 1
                    """
                }
            }
        }
        
        stage('Set Up Environment') {
            steps {
                script {
                    echo "‚öôÔ∏è Creating .env file for QA..."
                    bat """
                        cd ${DEPLOY_DIR}
                        echo DATABASE_URL=${DATABASE_URL} > .env
                        echo CLERK_SECRET_KEY=${CLERK_SECRET_KEY} >> .env
                        echo NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY} >> .env
                        echo NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} >> .env
                        echo "‚úÖ .env file created successfully!"
                        type .env
                    """
                }
            }
        }
        
        stage('Install Node.js') {
            steps {
                script {
                    echo "üîß Ensuring Node.js ${NODE_VERSION} is installed..."
                    bat """
                        set NVM_DIR=C:\\Users\\Administrator\\AppData\\Roaming\\nvm
                        set NODEJS_HOME=%NVM_DIR%\\v${NODE_VERSION}
                        set PATH=%NODEJS_HOME%;%PATH%
                        node -v || exit /b 1
                        npm -v || exit /b 1
                    """
                }
            }
        }
        
        stage('Install Dependencies') {
            steps {
                script {
                    echo "üì¶ Installing dependencies..."
                    bat """
                        cd ${DEPLOY_DIR}
                        npm install --force || exit /b 1
                    """
                }
            }
        }
        
        stage('Generate Prisma Client') {
            steps {
                script {
                    echo "üõ†Ô∏è Generating Prisma Client..."
                    bat """
                        cd ${DEPLOY_DIR}
                        npx prisma generate || exit /b 1
                    """
                }
            }
        }
        
        stage('Run Prisma Migrations') {
            steps {
                script {
                    echo "üìú Applying Prisma Migrations..."
                    bat """
                        cd ${DEPLOY_DIR}
                        npx prisma migrate deploy || exit /b 1
                    """
                }
            }
        }
        
        stage('Run Tests') {
            steps {
                script {
                    echo "üß™ Running tests..."
                    // bat """
                    //     cd ${DEPLOY_DIR}
                    //     npm test || exit /b 1
                    // """
                }
            }
        }
        
        stage('Start Application') {
            steps {
                script {
                    echo "üöÄ Starting Next.js server in QA..."
                    bat """
                        cd ${DEPLOY_DIR}
                        taskkill /F /IM node.exe || echo "No running process found"
                        start /B npm start > nextjs.log 2>&1
                    """
                }
            }
        }
    }
    
    post {
        always {
            script {
                withCredentials([
                    string(credentialsId: 'SLACK_CHANNEL', variable: 'SLACK_CHANNEL'),
                    string(credentialsId: 'slack-webhook', variable: 'SLACK_WEBHOOK')
                ]) {
                    def message = currentBuild.result == 'SUCCESS' ? 
                        "‚úÖ *QA Deployment Successful!* üéâ\n*Application:* ${APP_NAME}\n*Environment:* QA" :
                        "‚ùå *QA Deployment Failed!* üö®\n*Application:* ${APP_NAME}\n*Environment:* QA"
                        
                    def color = currentBuild.result == 'SUCCESS' ? "good" : "danger"
                    
                    slackSend(
                        channel: "${SLACK_CHANNEL}",
                        message: message,
                        color: color,
                        botUser: true,
                        tokenCredentialId: 'slack-webhook'
                    )
                }
            }
        }
    }
}
