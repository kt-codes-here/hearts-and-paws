pipeline {
    agent any

    environment {
        NODE_VERSION = '22.14.0'
        DATABASE_URL = credentials('DATABASE_URL')
        NEXT_PUBLIC_API_URL = 'https://api.hearts-and-paws.dev'
        NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY = credentials('NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY')
        CLERK_SECRET_KEY = credentials('CLERK_SECRET_KEY')
        DEPLOY_DIR = 'E:\\jenkinnodes\\workspace\\Deployment to Dev\\hearts-and-paws'
        APP_NAME = 'hearts-and-paws'
        SLACK_CHANNEL = 'team4'
        SLACK_CREDENTIALS_ID = 'https://hooks.slack.com/services/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'
    }

    stages {
        stage('Checkout Code') {
            steps {
                script {
                    echo "üì• Pulling latest changes from branch-dev"
                    bat """
                    cd ${DEPLOY_DIR}
                    git reset --hard HEAD
                    git pull origin branch-dev
                    """
                }
            }
        }

        stage('Set Up Environment') {
            steps {
                script {
                    echo "‚öôÔ∏è Creating .env file..."
                    bat """
                    cd ${DEPLOY_DIR}
                    echo DATABASE_URL=${DATABASE_URL} > .env
                    echo CLERK_SECRET_KEY=${CLERK_SECRET_KEY} >> .env
                    echo NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY} >> .env
                    echo NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} >> .env
                    echo "‚úÖ .env file created successfully!"
                    type .env
                    """
                }
            }
        }

        stage('Install Node.js') {
            steps {
                script {
                    echo "üîß Ensuring Node.js ${NODE_VERSION} is installed..."
                    bat """
                    nvm use ${NODE_VERSION} || exit /b 1
                    node -v
                    npm -v
                    """
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                script {
                    echo "üì¶ Installing dependencies..."
                    bat """
                    cd ${DEPLOY_DIR}
                    npm install --force
                    """
                }
            }
        }

        stage('Generate Prisma Client') {
            steps {
                script {
                    echo "üõ†Ô∏è Generating Prisma Client..."
                    bat """
                    cd ${DEPLOY_DIR}
                    npx prisma generate || exit /b 1
                    """
                }
            }
        }

        stage('Run Prisma Migrations') {
            steps {
                script {
                    echo "üìú Applying Prisma Migrations..."
                    bat """
                    cd ${DEPLOY_DIR}
                    npx prisma migrate deploy || exit /b 1
                    """
                }
            }
        }

        stage('Build Next.js') {
            steps {
                script {
                    echo "üèóÔ∏è Building Next.js app..."
                    bat """
                    cd ${DEPLOY_DIR}
                    npm run build || exit /b 1
                    """
                }
            }
        }

        stage('Start Application') {
            steps {
                script {
                    echo "üöÄ Starting Next.js server..."
                    bat """
                    cd ${DEPLOY_DIR}
                    taskkill /F /IM node.exe || echo "No running process found"
                    start /B npm start > nextjs.log 2>&1
                    """
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ Deployment to DEV successful!"
            slackSend(channel: "${SLACK_CHANNEL}", 
                      message: "‚úÖ *Deployment Successful!* üéâ\n*Application:* ${APP_NAME}\n*Environment:* DEV", 
                      color: 'good', 
                      teamDomain: 'cs691-CRN23318-Tue')
        }
        failure {
            echo "‚ùå Deployment to DEV failed!"
            slackSend(channel: "${SLACK_CHANNEL}", 
                      message: "‚ùå *Deployment Failed!* üö®\n*Application:* ${APP_NAME}\n*Environment:* DEV", 
                      color: 'danger', 
                      teamDomain: 'cs691-CRN23318-Tue')
        }
    }
}
