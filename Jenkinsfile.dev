pipeline {
  agent any

  environment {
    NODE_VERSION                   = '22.14.0'
    DATABASE_URL                   = credentials('DATABASE_URL')
    NEXT_PUBLIC_API_URL            = 'https://api.hearts-and-paws.dev'
    NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY = credentials('NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY')
    CLERK_SECRET_KEY               = credentials('CLERK_SECRET_KEY')
    DEPLOY_DIR                     = 'E:\\jenkinnodes\\workspace\\Deployment to Dev\\hearts-and-paws'
    APP_NAME                       = 'Slack-notification-service'
    JIRA_BASE_URL                  = credentials('JIRA_BASE_URL')
    JIRA_USERNAME                  = credentials('jira-username')
    JIRA_API_TOKEN                 = credentials('jira-admin-token')
    SLACK_CHANNEL                  = credentials('SLACK_CHANNEL')
  }

  stages {
    stage('Checkout Code') {
      steps {
        script {
          bat """
            cd ${DEPLOY_DIR}
            git reset --hard HEAD
            git pull origin branch-dev || exit /b 1
          """
        }
      }
    }

    stage('Extract JIRA Issue from Commit') {
      steps {
        script {
          def commitMessageOutput = bat(
            script: "cd ${DEPLOY_DIR} && git log -1 --pretty=%%B",
            returnStdout: true
          ).trim()

          def commitLines = commitMessageOutput.split(/[\r\n]+/)
          def commitMessage = commitLines.reverse().find { it.trim() }
          
          def matcher = commitMessage =~ /(SCRUM-\d+)/
          env.JIRA_ISSUE_KEY = matcher ? matcher[0][0] : ""
          echo "Detected JIRA Issue Key: ${env.JIRA_ISSUE_KEY}"
        }
      }
    }

    stage('Query JIRA and Notify Slack') {
      when {
        expression { return env.JIRA_ISSUE_KEY }
      }
      steps {
        script {
          def full = bat(
            script: """
              cd ${DEPLOY_DIR} && \
              curl -s -u ${env.JIRA_USERNAME}:${env.JIRA_API_TOKEN} \
                   -X GET -H "Content-Type: application/json" \
                   "${env.JIRA_BASE_URL}/rest/api/2/issue/${env.JIRA_ISSUE_KEY}"
            """,
            returnStdout: true
          ).trim()

          def jsonLine = full.split(/[\r\n]+/).find { it.startsWith("{") }
          def issue     = readJSON text: jsonLine

          def summary = issue.fields.summary ?: "No summary"
          def status  = issue.fields.status.name ?: "Unknown"

          def extra = status.equalsIgnoreCase("Test") ? """
            ‚Ä¢ :microscope: *Tester*, please go through the feature and test it.
            ‚Ä¢ Once testing is complete, please open a PR into `branch-QA`.
          """ : ""

          def msg = """
            *Code Push Notification*
            *Branch:* branch-dev
            *JIRA Task:* ${env.JIRA_ISSUE_KEY}
            *Summary:* ${summary}
            *Status:* ${status}
            ${extra}
          """.stripIndent()

          slackSend(
            channel: "${SLACK_CHANNEL}",
            message: msg,
            color: status.equalsIgnoreCase("Test") ? "warning" : "good",
            botUser: true,
            tokenCredentialId: 'slack-webhook'
          )
        }
      }
    }

    stage('Set Up Environment') {
      steps {
        script {
          bat """
            cd ${DEPLOY_DIR}
            echo DATABASE_URL=${DATABASE_URL} > .env
            echo CLERK_SECRET_KEY=${CLERK_SECRET_KEY} >> .env
            echo NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=${NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY} >> .env
            echo NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL} >> .env
          """
        }
      }
    }

    stage('Install Node.js') {
      steps {
        script {
          bat """
            set NVM_DIR=C:\\Users\\Administrator\\AppData\\Roaming\\nvm
            set NODEJS_HOME=%NVM_DIR%\\v${NODE_VERSION}
            set PATH=%NODEJS_HOME%;%PATH%
            node -v
            npm -v
          """
        }
      }
    }

    stage('Install Dependencies') {
      steps {
        script {
          bat """
            cd ${DEPLOY_DIR}
            npm install --force
          """
        }
      }
    }

    stage('Generate Prisma Client') {
      steps {
        script {
          bat """
            cd ${DEPLOY_DIR}
            npx prisma generate
          """
        }
      }
    }

    stage('Run Prisma Migrations') {
      steps {
        script {
          bat """
            cd ${DEPLOY_DIR}
            npx prisma migrate deploy
          """
        }
      }
    }

    stage('Build Next.js') {
      steps {
        script {
          echo "üèóÔ∏è Building Next.js app..."
          // bat "cd ${DEPLOY_DIR} && npm run build"
        }
      }
    }

    stage('Start Application') {
      steps {
        script {
          // bat """
          //   cd ${DEPLOY_DIR}
          //   taskkill /F /IM node.exe || echo "No running process found"
          //   start /B npm start > nextjs.log 2>&1
          // """
        }
      }
    }
  }  // ‚Üê closes stages

  post {
    always {
      script {
        withCredentials([
          string(credentialsId: 'SLACK_CHANNEL', variable: 'SLACK_CHANNEL'),
          string(credentialsId: 'slack-webhook',  variable: 'SLACK_WEBHOOK')
        ]) {
          def msg  = currentBuild.result == 'SUCCESS' ?
                     "‚úÖ *Deployment Successful!* üéâ\n*App:* ${APP_NAME}\n*Env:* DEV" :
                     "‚ùå *Deployment Failed!* üö®\n*App:* ${APP_NAME}\n*Env:* DEV"
          def col  = currentBuild.result == 'SUCCESS' ? "good" : "danger"

          slackSend(
            channel: "${SLACK_CHANNEL}",
            message: msg,
            color: col,
            botUser: true,
            tokenCredentialId: 'slack-webhook'
          )
        }
      }
    }
  }
}  // ‚Üê closes pipeline
